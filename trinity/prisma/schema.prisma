// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  email     String    @unique
  phone     String?   @unique
  password  String
  birthDate DateTime?
  role      Role      @default(Customer)
  carts     Cart[]
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id               String               @id @default(cuid())
  name             String
  price            Int
  description      String
  picture          String
  barCode          BigInt               @unique
  nutriScore       nutriScore?
  brand            Brand                @relation(fields: [brandId], references: [id])
  brandId          String
  categories       CategoriesProducts[]
  stock            Stock?
  cartsWithProduct ProductInCart[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
}

model Category {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  products    CategoriesProducts[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model CategoriesProducts {
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String
  assignedAt   DateTime @default(now())

  @@id([productId, categoryName])
}

model Stock {
  id        String   @id @default(cuid())
  quantity  Int
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  productsInCart ProductInCart[]
  orders         Order[]
  archived       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProductInCart {
  id        String   @id @default(cuid())
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      AddressType
  street    String
  city      String
  zipCode   String
  country   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  cartId            String
  billingAddressId  String?
  shippingAddressId String?
  validated         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart            Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
}

enum AddressType {
  domicile
  livraison
}

enum Role {
  Admin
  Seller
  Customer
}

enum nutriScore {
  A
  B
  C
  D
  E
  unknown
}
